"""Make Reminder.trigger_datetime nullable

Revision ID: 7088664ddb48
Revises: 4a24dd516572
Create Date: 2025-04-29 09:11:15.364557

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7088664ddb48'
down_revision: Union[str, None] = '4a24dd516572'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('reminders', 'trigger_datetime',
    #            existing_type=sa.DATETIME(timezone=True),
    #            nullable=True,
    #            existing_nullable=False)
    # Replace the above with batch operation for SQLite compatibility
    with op.batch_alter_table('reminders', schema=None) as batch_op:
        batch_op.alter_column('trigger_datetime',
               existing_type=sa.DATETIME(timezone=True),
               nullable=True,
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('reminders', 'trigger_datetime',
    #            existing_type=sa.DATETIME(timezone=True),
    #            nullable=False,
    #            existing_nullable=True)
    # Replace the above with batch operation for SQLite compatibility
    with op.batch_alter_table('reminders', schema=None) as batch_op:
        batch_op.alter_column('trigger_datetime',
               existing_type=sa.DATETIME(timezone=True),
               nullable=False,
               existing_nullable=True)

    # ### end Alembic commands ###
